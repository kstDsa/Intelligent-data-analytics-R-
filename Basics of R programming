---
title: "HW1_rmd"
author: "Sai Teja Kamma"
date: "August 26, 2016"
output: word_document
---

#required packages for this assignment
library(rmarkdown)  
library(moments)   
library(plyr)
library(datasets)

                                    1 Using R: Vectors

(a) Create a vector with 10 numbers (3, 12, 6, -5, 0, 8, 15, 1, -10, 7) and assign it to x.

```{r}
x<-c(3, 12, 6, -5, 0, 8, 15, 1, -10, 7) #creates a vector x and c means combine/concatenate
x                                       #view the vector x
```

(b) Using the commands seq, min, and max with one line of code create a new vector y with 10 elements
ranging from the minimum value of x to the maximum value of x.

```{r}
y<-seq(min(x), max(x),length.out = 10)   # y ranging from min value of x to max value of x with sequence
y #vie the vector y
```

(c) Compute the sum, mean, standard deviation, variance, mean absolute deviation, quartiles, and
quintiles for x and y.

```{r}

sum(x)
sum(y)

mean(x)
mean(y)

sd(x)
sd(y)

var(x)
var(y)

mad(x)
mad(y)

quantile(x, probs = seq(0, 1, 0.25))
quantile(y, probs = seq(0, 1, 0.25))

quantile(x, probs = seq(0, 1, 0.2))  #For quartile 0.2 and for quantile its 0.25
quantile(y, probs = seq(0, 1, 0.2))

```

(d) Create a new 7 element vector z by using R to randomly sample from x with replacement.

```{r}
z<-c(sample(x, 7, replace=TRUE, prob=NULL)) #Taking 7 sample values from x with replacement with no weights
z
```

(e) Find a package (or packages) that provide the statistical measures skewness and kurtosis. Use the
appropriate functions from the package to calculate the skewness and kurtosis of x.

```{r}
skewness(x)
kurtosis(x)

```


(f) Use t.test() to compute a statistical test for differences in means between the vectors x and y.
Are the differences in means significant?

```{r}
t.test(x, y, mu=0, conf.level=0.95)
```

(g) Sort the vector x and re-run the t-test as a paired t-test.

```{r}
sort(x, decreasing = FALSE) #Sorting in increasing order
t.test(x, y, paired = TRUE) #Paired t-test
```

(h) Create a logical vector that identifies which numbers in x are negative.

```{r}
l<-(x>=0)  #Returns false for negative values of x and l is the logical vector
l
```

(i) Use this logical vector to remove all entries with negative numbers from x. (Make sure to overwrite
the vector x so that the new vector x has 8 elements!)

```{r}
x<-x[l] #Returning values that are greater than zero to x
x       #Toview updated x
```


                        2 Using R: Introductory data exploration
                        
                        
(a) 

```{r}
college <- (read.csv(file="college.csv",head=TRUE,sep=",")) #Reading the csv file into college dataframe
```

(b)

```{r}
rownames (college) <- college [,1] #setting 1st column as rownames
college <- college [,-1]           #Deleting the 1st column

```

(c) (i)
```{r}
summary(college) #used to find out the descriptive statistics for the college dataframe

```

(ii)
```{r}
windows() #To open the output in a new window
pairs(college[,1:10]) #accesing the first 10 columns of college DF
```

(iii)
```{r}
windows() #To open the output in a new window
plot(college$Private, college$Outstate, xlab="Private", ylab="Outstate", main="Out of state students in private universities")
```

(iv)
```{r}
Elite <- rep ("No", nrow(college ))     #Assign No to every row in the elite column
Elite [college$Top10perc >50] <- "Yes"  #Repalcing no with yes if top 10% students from every college are more than 50

Elite <- as.factor (Elite)  #coerces its argument to a factor(i.e converting yes and no's into factors/levels)

college <- data.frame(college ,Elite) #adding elite column to college Dataframe
```
(v)
```{r}
summary(college$Elite) #Descriptive statistics for elite column
```
(vi)
```{r}
windows()
plot(college$Elite, college$Outstate, main="Out of state students in elite universities",xlab="Elite",ylab="Outstate")
```
(vii)
```{r}
windows()
par(mfrow=c(2,3))  # splitting the plots into 2 rows and 3 columns
hist(college$Apps)
hist(college$Accept) #Creating histograms for the given column
hist(college$Enroll)
hist(college$Outstate)
```

                      3.Using R: Manipulating data in data frames
                      

(a)
```{r}
?baseball
baseball<-data.frame(baseball) #Loading baseball into the dataframe
```

(b)
```{r}
baseball$sf[baseball$year<1954] <- 0     #Updating sf values as zero for years before than 1954
baseball$hbp[is.na(baseball$hbp)] <- 0   #Replacing na values of hbp with 0
baseball<-baseball[c(baseball$ab>=50), ] #Removing the values of ab that are less than 50 
```

(c) Compute on base percentage in the variable obp according to the formula:
```{r}
baseball$obp <- ((baseball$h + baseball$bb + baseball$hbp)/(baseball$ab + baseball$bb + baseball$hbp + baseball$sf))
```

(d) Sort the data based on the computed obp and print the year, player name, and on base percentage
for the top five records based on this value.
```{r}
baseball <-  baseball[order(baseball$obp),] #sorting based on obp
tail(baseball,5) # printing out the top 5 values based on obp
```



                         4 Using R: aggregate() function
                         
(a) Load the quakes data from the datasets package.
```{r}
data.frame("quakes") #loading the quakes dataset into a dataframe
```

(b) Plot the recorded earthquake magnitude against the earthquake depth using the plot command.
```{r}
windows()
plot(quakes$depth, quakes$mag,xlab="depth", ylab="magnitude")
```

(c)Use aggregate to compute the average earthquake depth for each magnitude level. Store these
results in a new data frame named quakeAvgDepth.
```{r}
quakeAvgDepth <- aggregate(depth ~ mag ,data=quakes,mean)
quakeAvgDepth
```

(d)Rename the variables in quakeAvgDepth to something meaningful.
```{r}
#Replacing the column names with appropriate names
colnames(quakeAvgDepth)[colnames(quakeAvgDepth)=="mag"] <- "mag_levels"  
colnames(quakeAvgDepth)[colnames(quakeAvgDepth)=="depth"] <- "avg_depth"
```

(e)Plot the magnitude vs. the average depth.
```{r}
windows()
plot(quakeAvgDepth$avg_depth, quakeAvgDepth$mag_levels, xlab="avg_depth", ylab="mag_levels",  main= "quakes_avg_depth")
```
